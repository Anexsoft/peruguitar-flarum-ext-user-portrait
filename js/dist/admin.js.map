{"version":3,"file":"admin.js","mappings":";;;;;;;;;AAAAA,GAAG,CAACC,YAAY,CAACC,GAAG,CAAC,0BAA0B,EAAE,YAAM;EACnDF,GAAG,CAACG,aAAa,OAAI,CAAC,0BAA0B,CAAC,CAACC,eAAe,CAC7D;IACIC,OAAO,EAAE,+CAA+C;IACxDC,KAAK,EAAEN,GAAG,CAACO,UAAU,CAACC,KAAK,CAAC,2DAA2D,CAAC;IACxFC,IAAI,EAAET,GAAG,CAACO,UAAU,CAACC,KAAK,CAAC,0DAA0D,CAAC;IACtFE,IAAI,EAAE;EACV,CAAC,EACD,EAAE,CAAC;EAAA,CACN;AACL,CAAC,CAAC;;;;;;;;;;;;;;ACVkC;AAEpCV,yEAAoB,CAAC,0BAA0B,EAAE,YAAM;EACnDW,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;AACrE,CAAC,CAAC;;;;;;;;;;;ACJF;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACN6B","sources":["webpack://@peruguitar/flarum-ext-user-portrait/./src/admin/index.js","webpack://@peruguitar/flarum-ext-user-portrait/./src/common/index.js","webpack://@peruguitar/flarum-ext-user-portrait/external root \"flarum.core.compat['common/app']\"","webpack://@peruguitar/flarum-ext-user-portrait/webpack/bootstrap","webpack://@peruguitar/flarum-ext-user-portrait/webpack/runtime/compat get default export","webpack://@peruguitar/flarum-ext-user-portrait/webpack/runtime/define property getters","webpack://@peruguitar/flarum-ext-user-portrait/webpack/runtime/hasOwnProperty shorthand","webpack://@peruguitar/flarum-ext-user-portrait/webpack/runtime/make namespace object","webpack://@peruguitar/flarum-ext-user-portrait/./admin.js"],"sourcesContent":["app.initializers.add('peruguitar/user-portrait', () => {\n    app.extensionData.for('peruguitar-user-portrait').registerSetting(\n        {\n            setting: 'peruguitar.user-portrait.available_for_mobile',\n            label: app.translator.trans('peruguitar-user-portrait.admin.available_for_mobile_label'),\n            help: app.translator.trans('peruguitar-user-portrait.admin.available_for_mobile_help'),\n            type: 'boolean',\n        },\n        30 // Optional: Priority\n    );\n});\n","import app from 'flarum/common/app';\n\napp.initializers.add('peruguitar/user-portrait', () => {\n    console.log('[peruguitar/user-portrait] Hello, forum and admin!');\n});\n","module.exports = flarum.core.compat['common/app'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './src/common';\nexport * from './src/admin';\n"],"names":["app","initializers","add","extensionData","registerSetting","setting","label","translator","trans","help","type","console","log"],"sourceRoot":""}